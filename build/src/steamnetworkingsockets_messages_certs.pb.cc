// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages_certs.proto

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
class CMsgSteamNetworkingIdentityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamNetworkingIdentity> _instance;
} _CMsgSteamNetworkingIdentity_default_instance_;
class CMsgSteamDatagramCertificateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificate> _instance;
} _CMsgSteamDatagramCertificate_default_instance_;
class CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CMsgSteamDatagramCertificateSigned> _instance;
} _CMsgSteamDatagramCertificateSigned_default_instance_;
static void InitDefaultsscc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificate_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {
      &scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,}};

static void InitDefaultsscc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamDatagramCertificateSigned_default_instance_;
    new (ptr) ::CMsgSteamDatagramCertificateSigned();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

static void InitDefaultsscc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CMsgSteamNetworkingIdentity_default_instance_;
    new (ptr) ::CMsgSteamNetworkingIdentity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CMsgSteamNetworkingIdentity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, generic_bytes_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, generic_string_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentity, ipv6_and_port_),
  3,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_type_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, key_data_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, legacy_steam_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, identity_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, gameserver_datacenter_ids_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_created_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, time_expiry_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, app_ids_),
  3,
  0,
  2,
  1,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, cert_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_key_id_),
  PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, ca_signature_),
  0,
  2,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::CMsgSteamNetworkingIdentity)},
  { 13, 26, sizeof(::CMsgSteamDatagramCertificate)},
  { 34, 42, sizeof(::CMsgSteamDatagramCertificateSigned)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamNetworkingIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCertificate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CMsgSteamDatagramCertificateSigned_default_instance_),
};

const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] =
  "\n+steamnetworkingsockets_messages_certs."
  "proto\"u\n\033CMsgSteamNetworkingIdentity\022\020\n\010"
  "steam_id\030\020 \001(\006\022\025\n\rgeneric_bytes\030\002 \001(\014\022\026\n"
  "\016generic_string\030\003 \001(\t\022\025\n\ripv6_and_port\030\004"
  " \001(\014\"\270\002\n\034CMsgSteamDatagramCertificate\0228\n"
  "\010key_type\030\001 \001(\0162&.CMsgSteamDatagramCerti"
  "ficate.EKeyType\022\020\n\010key_data\030\002 \001(\014\022\027\n\017leg"
  "acy_steam_id\030\004 \001(\006\022.\n\010identity\030\013 \001(\0132\034.C"
  "MsgSteamNetworkingIdentity\022!\n\031gameserver"
  "_datacenter_ids\030\005 \003(\007\022\024\n\014time_created\030\010 "
  "\001(\007\022\023\n\013time_expiry\030\t \001(\007\022\017\n\007app_ids\030\n \003("
  "\r\"$\n\010EKeyType\022\013\n\007INVALID\020\000\022\013\n\007ED25519\020\001\""
  "[\n\"CMsgSteamDatagramCertificateSigned\022\014\n"
  "\004cert\030\004 \001(\014\022\021\n\tca_key_id\030\005 \001(\006\022\024\n\014ca_sig"
  "nature\030\006 \001(\014B\005H\001\200\001\000"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_sccs[3] = {
  &scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
  &scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
  &scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once;
static bool descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
  &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_initialized, descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto, "steamnetworkingsockets_messages_certs.proto", 579,
  &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once, descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_sccs, descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
  file_level_metadata_steamnetworkingsockets_5fmessages_5fcerts_2eproto, 3, file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto, file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_steamnetworkingsockets_5fmessages_5fcerts_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::INVALID;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::ED25519;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MIN;
constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::EKeyType_MAX;
constexpr int CMsgSteamDatagramCertificate::EKeyType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void CMsgSteamNetworkingIdentity::InitAsDefaultInstance() {
}
class CMsgSteamNetworkingIdentity::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CMsgSteamNetworkingIdentity>()._has_bits_);
  static void set_has_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_generic_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_generic_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ipv6_and_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamNetworkingIdentity::kSteamIdFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericBytesFieldNumber;
const int CMsgSteamNetworkingIdentity::kGenericStringFieldNumber;
const int CMsgSteamNetworkingIdentity::kIpv6AndPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamNetworkingIdentity)
}
CMsgSteamNetworkingIdentity::CMsgSteamNetworkingIdentity(const CMsgSteamNetworkingIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  generic_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_bytes()) {
    generic_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
  }
  generic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_generic_string()) {
    generic_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
  }
  ipv6_and_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ipv6_and_port()) {
    ipv6_and_port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
  }
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentity)
}

void CMsgSteamNetworkingIdentity::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  generic_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generic_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamNetworkingIdentity::~CMsgSteamNetworkingIdentity() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentity)
  SharedDtor();
}

void CMsgSteamNetworkingIdentity::SharedDtor() {
  generic_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  generic_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ipv6_and_port_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamNetworkingIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamNetworkingIdentity& CMsgSteamNetworkingIdentity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamNetworkingIdentity_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamNetworkingIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      generic_bytes_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      generic_string_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      ipv6_and_port_.ClearNonDefaultToEmptyNoArena();
    }
  }
  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamNetworkingIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes generic_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_generic_bytes(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string generic_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_generic_string(), ptr, ctx, "CMsgSteamNetworkingIdentity.generic_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes ipv6_and_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ipv6_and_port(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 steam_id = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          HasBitSetters::set_has_steam_id(&has_bits);
          steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamNetworkingIdentity::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamNetworkingIdentity)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes generic_bytes = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generic_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string generic_string = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_generic_string()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->generic_string().data(), static_cast<int>(this->generic_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "CMsgSteamNetworkingIdentity.generic_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ipv6_and_port = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ipv6_and_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (129 & 0xFF)) {
          HasBitSetters::set_has_steam_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamNetworkingIdentity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamNetworkingIdentity)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamNetworkingIdentity::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamNetworkingIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->generic_bytes(), output);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentity.generic_string");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->generic_string(), output);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->ipv6_and_port(), output);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(16, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamNetworkingIdentity)
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamNetworkingIdentity::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes generic_bytes = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->generic_bytes(), target);
  }

  // optional string generic_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->generic_string().data(), static_cast<int>(this->generic_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "CMsgSteamNetworkingIdentity.generic_string");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->generic_string(), target);
  }

  // optional bytes ipv6_and_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->ipv6_and_port(), target);
  }

  // optional fixed64 steam_id = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(16, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentity)
  return target;
}

size_t CMsgSteamNetworkingIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes generic_bytes = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->generic_bytes());
    }

    // optional string generic_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->generic_string());
    }

    // optional bytes ipv6_and_port = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ipv6_and_port());
    }

    // optional fixed64 steam_id = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamNetworkingIdentity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamNetworkingIdentity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamNetworkingIdentity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamNetworkingIdentity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamNetworkingIdentity)
    MergeFrom(*source);
  }
}

void CMsgSteamNetworkingIdentity::MergeFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      generic_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generic_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      generic_string_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.generic_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      ipv6_and_port_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ipv6_and_port_);
    }
    if (cached_has_bits & 0x00000008u) {
      steam_id_ = from.steam_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamNetworkingIdentity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamNetworkingIdentity::CopyFrom(const CMsgSteamNetworkingIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamNetworkingIdentity::IsInitialized() const {
  return true;
}

void CMsgSteamNetworkingIdentity::Swap(CMsgSteamNetworkingIdentity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamNetworkingIdentity::InternalSwap(CMsgSteamNetworkingIdentity* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  generic_bytes_.Swap(&other->generic_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  generic_string_.Swap(&other->generic_string_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ipv6_and_port_.Swap(&other->ipv6_and_port_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamNetworkingIdentity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramCertificate::InitAsDefaultInstance() {
  ::_CMsgSteamDatagramCertificate_default_instance_._instance.get_mutable()->identity_ = const_cast< ::CMsgSteamNetworkingIdentity*>(
      ::CMsgSteamNetworkingIdentity::internal_default_instance());
}
class CMsgSteamDatagramCertificate::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificate>()._has_bits_);
  static void set_has_key_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_legacy_steam_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CMsgSteamNetworkingIdentity& identity(const CMsgSteamDatagramCertificate* msg);
  static void set_has_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_created(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time_expiry(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::CMsgSteamNetworkingIdentity&
CMsgSteamDatagramCertificate::HasBitSetters::identity(const CMsgSteamDatagramCertificate* msg) {
  return *msg->identity_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificate::kKeyTypeFieldNumber;
const int CMsgSteamDatagramCertificate::kKeyDataFieldNumber;
const int CMsgSteamDatagramCertificate::kLegacySteamIdFieldNumber;
const int CMsgSteamDatagramCertificate::kIdentityFieldNumber;
const int CMsgSteamDatagramCertificate::kGameserverDatacenterIdsFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeCreatedFieldNumber;
const int CMsgSteamDatagramCertificate::kTimeExpiryFieldNumber;
const int CMsgSteamDatagramCertificate::kAppIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramCertificate)
}
CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gameserver_datacenter_ids_(from.gameserver_datacenter_ids_),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_data()) {
    key_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_data_);
  }
  if (from.has_identity()) {
    identity_ = new ::CMsgSteamNetworkingIdentity(*from.identity_);
  } else {
    identity_ = nullptr;
  }
  ::memcpy(&legacy_steam_id_, &from.legacy_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_expiry_) -
    reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}

void CMsgSteamDatagramCertificate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  key_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&identity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_expiry_) -
      reinterpret_cast<char*>(&identity_)) + sizeof(time_expiry_));
}

CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  SharedDtor();
}

void CMsgSteamDatagramCertificate::SharedDtor() {
  key_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_;
}

void CMsgSteamDatagramCertificate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificate_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameserver_datacenter_ids_.Clear();
  app_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_data_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(identity_ != nullptr);
      identity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&legacy_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_expiry_) -
        reinterpret_cast<char*>(&legacy_steam_id_)) + sizeof(time_expiry_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramCertificate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CMsgSteamDatagramCertificate_EKeyType_IsValid(val))) {
            set_key_type(static_cast<::CMsgSteamDatagramCertificate_EKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bytes key_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_key_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 legacy_steam_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          HasBitSetters::set_has_legacy_steam_id(&has_bits);
          legacy_steam_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_gameserver_datacenter_ids(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 45);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(mutable_gameserver_datacenter_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_created = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          HasBitSetters::set_has_time_created(&has_bits);
          time_created_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed32 time_expiry = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          HasBitSetters::set_has_time_expiry(&has_bits);
          time_expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // repeated uint32 app_ids = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_app_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 80);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_app_ids(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .CMsgSteamNetworkingIdentity identity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_identity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramCertificate::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramCertificate)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CMsgSteamDatagramCertificate_EKeyType_IsValid(value)) {
            set_key_type(static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes key_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 legacy_steam_id = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_legacy_steam_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &legacy_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed32 gameserver_datacenter_ids = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 45u, input, this->mutable_gameserver_datacenter_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_gameserver_datacenter_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_created = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_time_created(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_created_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 time_expiry = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_time_expiry(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &time_expiry_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 app_ids = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80u, input, this->mutable_app_ids())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_app_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .CMsgSteamNetworkingIdentity identity = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_identity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramCertificate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramCertificate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramCertificate::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->key_type(), output);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key_data(), output);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(4, this->legacy_steam_id(), output);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this->gameserver_datacenter_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(
      5, this->gameserver_datacenter_ids(i), output);
  }

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(8, this->time_created(), output);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32(9, this->time_expiry(), output);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this->app_ids_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(
      10, this->app_ids(i), output);
  }

  // optional .CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::identity(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramCertificate)
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramCertificate::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->key_type(), target);
  }

  // optional bytes key_data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        2, this->key_data(), target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(4, this->legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteFixed32ToArray(5, this->gameserver_datacenter_ids_, target);

  // optional fixed32 time_created = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(8, this->time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt32ToArray(10, this->app_ids_, target);

  // optional .CMsgSteamNetworkingIdentity identity = 11;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::identity(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 gameserver_datacenter_ids = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gameserver_datacenter_ids_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->gameserver_datacenter_ids_size());
    total_size += data_size;
  }

  // repeated uint32 app_ids = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->app_ids_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->app_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes key_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->key_data());
    }

    // optional .CMsgSteamNetworkingIdentity identity = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *identity_);
    }

    // optional fixed64 legacy_steam_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->key_type());
    }

    // optional fixed32 time_created = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 time_expiry = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramCertificate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificate)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificate::MergeFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameserver_datacenter_ids_.MergeFrom(from.gameserver_datacenter_ids_);
  app_ids_.MergeFrom(from.app_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      key_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_identity()->::CMsgSteamNetworkingIdentity::MergeFrom(from.identity());
    }
    if (cached_has_bits & 0x00000004u) {
      legacy_steam_id_ = from.legacy_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      key_type_ = from.key_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_created_ = from.time_created_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_expiry_ = from.time_expiry_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificate::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificate::Swap(CMsgSteamDatagramCertificate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gameserver_datacenter_ids_.InternalSwap(&other->gameserver_datacenter_ids_);
  app_ids_.InternalSwap(&other->app_ids_);
  key_data_.Swap(&other->key_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(identity_, other->identity_);
  swap(legacy_steam_id_, other->legacy_steam_id_);
  swap(key_type_, other->key_type_);
  swap(time_created_, other->time_created_);
  swap(time_expiry_, other->time_expiry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CMsgSteamDatagramCertificateSigned::InitAsDefaultInstance() {
}
class CMsgSteamDatagramCertificateSigned::HasBitSetters {
 public:
  using HasBits = decltype(std::declval<CMsgSteamDatagramCertificateSigned>()._has_bits_);
  static void set_has_cert(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ca_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ca_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSteamDatagramCertificateSigned::kCertFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaKeyIdFieldNumber;
const int CMsgSteamDatagramCertificateSigned::kCaSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CMsgSteamDatagramCertificateSigned)
}
CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_cert()) {
    cert_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cert_);
  }
  ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_ca_signature()) {
    ca_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
  }
  ca_key_id_ = from.ca_key_id_;
  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}

void CMsgSteamDatagramCertificateSigned::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  SharedDtor();
}

void CMsgSteamDatagramCertificateSigned::SharedDtor() {
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CMsgSteamDatagramCertificateSigned::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSteamDatagramCertificateSigned& CMsgSteamDatagramCertificateSigned::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CMsgSteamDatagramCertificateSigned_steamnetworkingsockets_5fmessages_5fcerts_2eproto.base);
  return *internal_default_instance();
}


void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      cert_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ca_signature_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ca_key_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSteamDatagramCertificateSigned::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  HasBitSetters::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional bytes cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_cert(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed64 ca_key_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          HasBitSetters::set_has_ca_key_id(&has_bits);
          ca_key_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional bytes ca_signature = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_ca_signature(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSteamDatagramCertificateSigned::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:CMsgSteamDatagramCertificateSigned)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes cert = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cert()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 ca_key_id = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_ca_key_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &ca_key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ca_signature = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ca_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CMsgSteamDatagramCertificateSigned)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CMsgSteamDatagramCertificateSigned)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSteamDatagramCertificateSigned::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CMsgSteamDatagramCertificateSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->cert(), output);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64(5, this->ca_key_id(), output);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->ca_signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CMsgSteamDatagramCertificateSigned)
}

::PROTOBUF_NAMESPACE_ID::uint8* CMsgSteamDatagramCertificateSigned::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes cert = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->cert(), target);
  }

  // optional fixed64 ca_key_id = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(5, this->ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        6, this->ca_signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes cert = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->cert());
    }

    // optional bytes ca_signature = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->ca_signature());
    }

    // optional fixed64 ca_key_id = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSteamDatagramCertificateSigned* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CMsgSteamDatagramCertificateSigned>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CMsgSteamDatagramCertificateSigned)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CMsgSteamDatagramCertificateSigned)
    MergeFrom(*source);
  }
}

void CMsgSteamDatagramCertificateSigned::MergeFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      cert_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.cert_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      ca_signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ca_signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      ca_key_id_ = from.ca_key_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSteamDatagramCertificateSigned::IsInitialized() const {
  return true;
}

void CMsgSteamDatagramCertificateSigned::Swap(CMsgSteamDatagramCertificateSigned* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cert_.Swap(&other->cert_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ca_signature_.Swap(&other->ca_signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ca_key_id_, other->ca_key_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CMsgSteamNetworkingIdentity* Arena::CreateMaybeMessage< ::CMsgSteamNetworkingIdentity >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamNetworkingIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificate* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificate >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::CMsgSteamDatagramCertificateSigned* Arena::CreateMaybeMessage< ::CMsgSteamDatagramCertificateSigned >(Arena* arena) {
  return Arena::CreateInternal< ::CMsgSteamDatagramCertificateSigned >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
