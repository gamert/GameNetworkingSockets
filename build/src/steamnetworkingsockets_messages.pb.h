// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: steamnetworkingsockets_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_steamnetworkingsockets_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_2eproto;
class CMsgSteamDatagramConnectionQuality;
class CMsgSteamDatagramConnectionQualityDefaultTypeInternal;
extern CMsgSteamDatagramConnectionQualityDefaultTypeInternal _CMsgSteamDatagramConnectionQuality_default_instance_;
class CMsgSteamDatagramDiagnostic;
class CMsgSteamDatagramDiagnosticDefaultTypeInternal;
extern CMsgSteamDatagramDiagnosticDefaultTypeInternal _CMsgSteamDatagramDiagnostic_default_instance_;
class CMsgSteamDatagramLinkInstantaneousStats;
class CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal;
extern CMsgSteamDatagramLinkInstantaneousStatsDefaultTypeInternal _CMsgSteamDatagramLinkInstantaneousStats_default_instance_;
class CMsgSteamDatagramLinkLifetimeStats;
class CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal;
extern CMsgSteamDatagramLinkLifetimeStatsDefaultTypeInternal _CMsgSteamDatagramLinkLifetimeStats_default_instance_;
class CMsgSteamDatagramSessionCryptInfo;
class CMsgSteamDatagramSessionCryptInfoDefaultTypeInternal;
extern CMsgSteamDatagramSessionCryptInfoDefaultTypeInternal _CMsgSteamDatagramSessionCryptInfo_default_instance_;
class CMsgSteamDatagramSessionCryptInfoSigned;
class CMsgSteamDatagramSessionCryptInfoSignedDefaultTypeInternal;
extern CMsgSteamDatagramSessionCryptInfoSignedDefaultTypeInternal _CMsgSteamDatagramSessionCryptInfoSigned_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::CMsgSteamDatagramConnectionQuality* Arena::CreateMaybeMessage<::CMsgSteamDatagramConnectionQuality>(Arena*);
template<> ::CMsgSteamDatagramDiagnostic* Arena::CreateMaybeMessage<::CMsgSteamDatagramDiagnostic>(Arena*);
template<> ::CMsgSteamDatagramLinkInstantaneousStats* Arena::CreateMaybeMessage<::CMsgSteamDatagramLinkInstantaneousStats>(Arena*);
template<> ::CMsgSteamDatagramLinkLifetimeStats* Arena::CreateMaybeMessage<::CMsgSteamDatagramLinkLifetimeStats>(Arena*);
template<> ::CMsgSteamDatagramSessionCryptInfo* Arena::CreateMaybeMessage<::CMsgSteamDatagramSessionCryptInfo>(Arena*);
template<> ::CMsgSteamDatagramSessionCryptInfoSigned* Arena::CreateMaybeMessage<::CMsgSteamDatagramSessionCryptInfoSigned>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum CMsgSteamDatagramSessionCryptInfo_EKeyType : int {
  CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID = 0,
  CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519 = 1
};
bool CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(int value);
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN = CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
constexpr CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX = CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
constexpr int CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE = CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
template<typename T>
inline const std::string& CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CMsgSteamDatagramSessionCryptInfo_EKeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CMsgSteamDatagramSessionCryptInfo_EKeyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), enum_t_value);
}
inline bool CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(
    const std::string& name, CMsgSteamDatagramSessionCryptInfo_EKeyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CMsgSteamDatagramSessionCryptInfo_EKeyType>(
    CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor(), name, value);
}
// ===================================================================

class CMsgSteamDatagramSessionCryptInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramSessionCryptInfo) */ {
 public:
  CMsgSteamDatagramSessionCryptInfo();
  virtual ~CMsgSteamDatagramSessionCryptInfo();

  CMsgSteamDatagramSessionCryptInfo(const CMsgSteamDatagramSessionCryptInfo& from);
  CMsgSteamDatagramSessionCryptInfo(CMsgSteamDatagramSessionCryptInfo&& from) noexcept
    : CMsgSteamDatagramSessionCryptInfo() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramSessionCryptInfo& operator=(const CMsgSteamDatagramSessionCryptInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramSessionCryptInfo& operator=(CMsgSteamDatagramSessionCryptInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramSessionCryptInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramSessionCryptInfo* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramSessionCryptInfo*>(
               &_CMsgSteamDatagramSessionCryptInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CMsgSteamDatagramSessionCryptInfo* other);
  friend void swap(CMsgSteamDatagramSessionCryptInfo& a, CMsgSteamDatagramSessionCryptInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramSessionCryptInfo* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramSessionCryptInfo>(nullptr);
  }

  CMsgSteamDatagramSessionCryptInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramSessionCryptInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramSessionCryptInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramSessionCryptInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CMsgSteamDatagramSessionCryptInfo_EKeyType EKeyType;
  static constexpr EKeyType INVALID =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_INVALID;
  static constexpr EKeyType CURVE25519 =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_CURVE25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value);
  }
  static constexpr EKeyType EKeyType_MIN =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MIN;
  static constexpr EKeyType EKeyType_MAX =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_MAX;
  static constexpr int EKeyType_ARRAYSIZE =
    CMsgSteamDatagramSessionCryptInfo_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EKeyType_descriptor() {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
  }
  template<typename T>
  static inline const std::string& EKeyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EKeyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EKeyType_Name.");
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Name(enum_t_value);
  }
  static inline bool EKeyType_Parse(const std::string& name,
      EKeyType* value) {
    return CMsgSteamDatagramSessionCryptInfo_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes key_data = 2;
  bool has_key_data() const;
  void clear_key_data();
  static const int kKeyDataFieldNumber = 2;
  const std::string& key_data() const;
  void set_key_data(const std::string& value);
  void set_key_data(std::string&& value);
  void set_key_data(const char* value);
  void set_key_data(const void* value, size_t size);
  std::string* mutable_key_data();
  std::string* release_key_data();
  void set_allocated_key_data(std::string* key_data);

  // optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
  bool has_key_type() const;
  void clear_key_type();
  static const int kKeyTypeFieldNumber = 1;
  ::CMsgSteamDatagramSessionCryptInfo_EKeyType key_type() const;
  void set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value);

  // optional uint32 protocol_version = 4;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version() const;
  void set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional fixed64 nonce = 3;
  bool has_nonce() const;
  void clear_nonce();
  static const int kNonceFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_data_;
  int key_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 protocol_version_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramSessionCryptInfoSigned :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramSessionCryptInfoSigned) */ {
 public:
  CMsgSteamDatagramSessionCryptInfoSigned();
  virtual ~CMsgSteamDatagramSessionCryptInfoSigned();

  CMsgSteamDatagramSessionCryptInfoSigned(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  CMsgSteamDatagramSessionCryptInfoSigned(CMsgSteamDatagramSessionCryptInfoSigned&& from) noexcept
    : CMsgSteamDatagramSessionCryptInfoSigned() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramSessionCryptInfoSigned& operator=(const CMsgSteamDatagramSessionCryptInfoSigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramSessionCryptInfoSigned& operator=(CMsgSteamDatagramSessionCryptInfoSigned&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramSessionCryptInfoSigned& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramSessionCryptInfoSigned* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramSessionCryptInfoSigned*>(
               &_CMsgSteamDatagramSessionCryptInfoSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CMsgSteamDatagramSessionCryptInfoSigned* other);
  friend void swap(CMsgSteamDatagramSessionCryptInfoSigned& a, CMsgSteamDatagramSessionCryptInfoSigned& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramSessionCryptInfoSigned* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramSessionCryptInfoSigned>(nullptr);
  }

  CMsgSteamDatagramSessionCryptInfoSigned* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramSessionCryptInfoSigned>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  void MergeFrom(const CMsgSteamDatagramSessionCryptInfoSigned& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramSessionCryptInfoSigned* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramSessionCryptInfoSigned";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes info = 1;
  bool has_info() const;
  void clear_info();
  static const int kInfoFieldNumber = 1;
  const std::string& info() const;
  void set_info(const std::string& value);
  void set_info(std::string&& value);
  void set_info(const char* value);
  void set_info(const void* value, size_t size);
  std::string* mutable_info();
  std::string* release_info();
  void set_allocated_info(std::string* info);

  // optional bytes signature = 2;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 2;
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramSessionCryptInfoSigned)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramDiagnostic :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramDiagnostic) */ {
 public:
  CMsgSteamDatagramDiagnostic();
  virtual ~CMsgSteamDatagramDiagnostic();

  CMsgSteamDatagramDiagnostic(const CMsgSteamDatagramDiagnostic& from);
  CMsgSteamDatagramDiagnostic(CMsgSteamDatagramDiagnostic&& from) noexcept
    : CMsgSteamDatagramDiagnostic() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramDiagnostic& operator=(const CMsgSteamDatagramDiagnostic& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramDiagnostic& operator=(CMsgSteamDatagramDiagnostic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramDiagnostic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramDiagnostic* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramDiagnostic*>(
               &_CMsgSteamDatagramDiagnostic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CMsgSteamDatagramDiagnostic* other);
  friend void swap(CMsgSteamDatagramDiagnostic& a, CMsgSteamDatagramDiagnostic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramDiagnostic* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramDiagnostic>(nullptr);
  }

  CMsgSteamDatagramDiagnostic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramDiagnostic>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramDiagnostic& from);
  void MergeFrom(const CMsgSteamDatagramDiagnostic& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramDiagnostic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramDiagnostic";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);

  // optional uint32 severity = 1;
  bool has_severity() const;
  void clear_severity();
  static const int kSeverityFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramDiagnostic)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::uint32 severity_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkInstantaneousStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramLinkInstantaneousStats) */ {
 public:
  CMsgSteamDatagramLinkInstantaneousStats();
  virtual ~CMsgSteamDatagramLinkInstantaneousStats();

  CMsgSteamDatagramLinkInstantaneousStats(const CMsgSteamDatagramLinkInstantaneousStats& from);
  CMsgSteamDatagramLinkInstantaneousStats(CMsgSteamDatagramLinkInstantaneousStats&& from) noexcept
    : CMsgSteamDatagramLinkInstantaneousStats() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramLinkInstantaneousStats& operator=(const CMsgSteamDatagramLinkInstantaneousStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramLinkInstantaneousStats& operator=(CMsgSteamDatagramLinkInstantaneousStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramLinkInstantaneousStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramLinkInstantaneousStats* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramLinkInstantaneousStats*>(
               &_CMsgSteamDatagramLinkInstantaneousStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CMsgSteamDatagramLinkInstantaneousStats* other);
  friend void swap(CMsgSteamDatagramLinkInstantaneousStats& a, CMsgSteamDatagramLinkInstantaneousStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramLinkInstantaneousStats* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramLinkInstantaneousStats>(nullptr);
  }

  CMsgSteamDatagramLinkInstantaneousStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramLinkInstantaneousStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkInstantaneousStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramLinkInstantaneousStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramLinkInstantaneousStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 out_packets_per_sec_x10 = 1;
  bool has_out_packets_per_sec_x10() const;
  void clear_out_packets_per_sec_x10();
  static const int kOutPacketsPerSecX10FieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_packets_per_sec_x10() const;
  void set_out_packets_per_sec_x10(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 out_bytes_per_sec = 2;
  bool has_out_bytes_per_sec() const;
  void clear_out_bytes_per_sec();
  static const int kOutBytesPerSecFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_bytes_per_sec() const;
  void set_out_bytes_per_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 in_packets_per_sec_x10 = 3;
  bool has_in_packets_per_sec_x10() const;
  void clear_in_packets_per_sec_x10();
  static const int kInPacketsPerSecX10FieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_packets_per_sec_x10() const;
  void set_in_packets_per_sec_x10(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 in_bytes_per_sec = 4;
  bool has_in_bytes_per_sec() const;
  void clear_in_bytes_per_sec();
  static const int kInBytesPerSecFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_bytes_per_sec() const;
  void set_in_bytes_per_sec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ms = 5;
  bool has_ping_ms() const;
  void clear_ping_ms();
  static const int kPingMsFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ms() const;
  void set_ping_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 packets_dropped_pct = 6;
  bool has_packets_dropped_pct() const;
  void clear_packets_dropped_pct();
  static const int kPacketsDroppedPctFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint32 packets_dropped_pct() const;
  void set_packets_dropped_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 packets_weird_sequence_pct = 7;
  bool has_packets_weird_sequence_pct() const;
  void clear_packets_weird_sequence_pct();
  static const int kPacketsWeirdSequencePctFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint32 packets_weird_sequence_pct() const;
  void set_packets_weird_sequence_pct(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 peak_jitter_usec = 8;
  bool has_peak_jitter_usec() const;
  void clear_peak_jitter_usec();
  static const int kPeakJitterUsecFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint32 peak_jitter_usec() const;
  void set_peak_jitter_usec(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkInstantaneousStats)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_packets_per_sec_x10_;
  ::PROTOBUF_NAMESPACE_ID::uint32 out_bytes_per_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_packets_per_sec_x10_;
  ::PROTOBUF_NAMESPACE_ID::uint32 in_bytes_per_sec_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packets_dropped_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 packets_weird_sequence_pct_;
  ::PROTOBUF_NAMESPACE_ID::uint32 peak_jitter_usec_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramLinkLifetimeStats :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramLinkLifetimeStats) */ {
 public:
  CMsgSteamDatagramLinkLifetimeStats();
  virtual ~CMsgSteamDatagramLinkLifetimeStats();

  CMsgSteamDatagramLinkLifetimeStats(const CMsgSteamDatagramLinkLifetimeStats& from);
  CMsgSteamDatagramLinkLifetimeStats(CMsgSteamDatagramLinkLifetimeStats&& from) noexcept
    : CMsgSteamDatagramLinkLifetimeStats() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramLinkLifetimeStats& operator=(const CMsgSteamDatagramLinkLifetimeStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramLinkLifetimeStats& operator=(CMsgSteamDatagramLinkLifetimeStats&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramLinkLifetimeStats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramLinkLifetimeStats* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramLinkLifetimeStats*>(
               &_CMsgSteamDatagramLinkLifetimeStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CMsgSteamDatagramLinkLifetimeStats* other);
  friend void swap(CMsgSteamDatagramLinkLifetimeStats& a, CMsgSteamDatagramLinkLifetimeStats& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramLinkLifetimeStats* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramLinkLifetimeStats>(nullptr);
  }

  CMsgSteamDatagramLinkLifetimeStats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramLinkLifetimeStats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  void MergeFrom(const CMsgSteamDatagramLinkLifetimeStats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramLinkLifetimeStats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramLinkLifetimeStats";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 packets_sent = 3;
  bool has_packets_sent() const;
  void clear_packets_sent();
  static const int kPacketsSentFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_sent() const;
  void set_packets_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 kb_sent = 4;
  bool has_kb_sent() const;
  void clear_kb_sent();
  static const int kKbSentFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint64 kb_sent() const;
  void set_kb_sent(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv = 5;
  bool has_packets_recv() const;
  void clear_packets_recv();
  static const int kPacketsRecvFieldNumber = 5;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv() const;
  void set_packets_recv(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 kb_recv = 6;
  bool has_kb_recv() const;
  void clear_kb_recv();
  static const int kKbRecvFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 kb_recv() const;
  void set_kb_recv(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv_sequenced = 7;
  bool has_packets_recv_sequenced() const;
  void clear_packets_recv_sequenced();
  static const int kPacketsRecvSequencedFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_sequenced() const;
  void set_packets_recv_sequenced(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv_dropped = 8;
  bool has_packets_recv_dropped() const;
  void clear_packets_recv_dropped();
  static const int kPacketsRecvDroppedFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_dropped() const;
  void set_packets_recv_dropped(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv_out_of_order = 9;
  bool has_packets_recv_out_of_order() const;
  void clear_packets_recv_out_of_order();
  static const int kPacketsRecvOutOfOrderFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_out_of_order() const;
  void set_packets_recv_out_of_order(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv_duplicate = 10;
  bool has_packets_recv_duplicate() const;
  void clear_packets_recv_duplicate();
  static const int kPacketsRecvDuplicateFieldNumber = 10;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_duplicate() const;
  void set_packets_recv_duplicate(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 packets_recv_lurch = 11;
  bool has_packets_recv_lurch() const;
  void clear_packets_recv_lurch();
  static const int kPacketsRecvLurchFieldNumber = 11;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_lurch() const;
  void set_packets_recv_lurch(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 quality_histogram_100 = 21;
  bool has_quality_histogram_100() const;
  void clear_quality_histogram_100();
  static const int kQualityHistogram100FieldNumber = 21;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_100() const;
  void set_quality_histogram_100(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_99 = 22;
  bool has_quality_histogram_99() const;
  void clear_quality_histogram_99();
  static const int kQualityHistogram99FieldNumber = 22;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_99() const;
  void set_quality_histogram_99(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_97 = 23;
  bool has_quality_histogram_97() const;
  void clear_quality_histogram_97();
  static const int kQualityHistogram97FieldNumber = 23;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_97() const;
  void set_quality_histogram_97(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_95 = 24;
  bool has_quality_histogram_95() const;
  void clear_quality_histogram_95();
  static const int kQualityHistogram95FieldNumber = 24;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_95() const;
  void set_quality_histogram_95(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_90 = 25;
  bool has_quality_histogram_90() const;
  void clear_quality_histogram_90();
  static const int kQualityHistogram90FieldNumber = 25;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_90() const;
  void set_quality_histogram_90(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_75 = 26;
  bool has_quality_histogram_75() const;
  void clear_quality_histogram_75();
  static const int kQualityHistogram75FieldNumber = 26;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_75() const;
  void set_quality_histogram_75(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_50 = 27;
  bool has_quality_histogram_50() const;
  void clear_quality_histogram_50();
  static const int kQualityHistogram50FieldNumber = 27;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_50() const;
  void set_quality_histogram_50(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_1 = 28;
  bool has_quality_histogram_1() const;
  void clear_quality_histogram_1();
  static const int kQualityHistogram1FieldNumber = 28;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_1() const;
  void set_quality_histogram_1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_histogram_dead = 29;
  bool has_quality_histogram_dead() const;
  void clear_quality_histogram_dead();
  static const int kQualityHistogramDeadFieldNumber = 29;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_dead() const;
  void set_quality_histogram_dead(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_ntile_2nd = 30;
  bool has_quality_ntile_2nd() const;
  void clear_quality_ntile_2nd();
  static const int kQualityNtile2NdFieldNumber = 30;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_2nd() const;
  void set_quality_ntile_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_ntile_5th = 31;
  bool has_quality_ntile_5th() const;
  void clear_quality_ntile_5th();
  static const int kQualityNtile5ThFieldNumber = 31;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_5th() const;
  void set_quality_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_ntile_25th = 32;
  bool has_quality_ntile_25th() const;
  void clear_quality_ntile_25th();
  static const int kQualityNtile25ThFieldNumber = 32;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_25th() const;
  void set_quality_ntile_25th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 quality_ntile_50th = 33;
  bool has_quality_ntile_50th() const;
  void clear_quality_ntile_50th();
  static const int kQualityNtile50ThFieldNumber = 33;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_50th() const;
  void set_quality_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_25 = 41;
  bool has_ping_histogram_25() const;
  void clear_ping_histogram_25();
  static const int kPingHistogram25FieldNumber = 41;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_25() const;
  void set_ping_histogram_25(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_50 = 42;
  bool has_ping_histogram_50() const;
  void clear_ping_histogram_50();
  static const int kPingHistogram50FieldNumber = 42;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_50() const;
  void set_ping_histogram_50(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_75 = 43;
  bool has_ping_histogram_75() const;
  void clear_ping_histogram_75();
  static const int kPingHistogram75FieldNumber = 43;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_75() const;
  void set_ping_histogram_75(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_100 = 44;
  bool has_ping_histogram_100() const;
  void clear_ping_histogram_100();
  static const int kPingHistogram100FieldNumber = 44;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_100() const;
  void set_ping_histogram_100(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_125 = 45;
  bool has_ping_histogram_125() const;
  void clear_ping_histogram_125();
  static const int kPingHistogram125FieldNumber = 45;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_125() const;
  void set_ping_histogram_125(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_150 = 46;
  bool has_ping_histogram_150() const;
  void clear_ping_histogram_150();
  static const int kPingHistogram150FieldNumber = 46;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_150() const;
  void set_ping_histogram_150(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_200 = 47;
  bool has_ping_histogram_200() const;
  void clear_ping_histogram_200();
  static const int kPingHistogram200FieldNumber = 47;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_200() const;
  void set_ping_histogram_200(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_300 = 48;
  bool has_ping_histogram_300() const;
  void clear_ping_histogram_300();
  static const int kPingHistogram300FieldNumber = 48;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_300() const;
  void set_ping_histogram_300(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_histogram_max = 49;
  bool has_ping_histogram_max() const;
  void clear_ping_histogram_max();
  static const int kPingHistogramMaxFieldNumber = 49;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_max() const;
  void set_ping_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ntile_5th = 50;
  bool has_ping_ntile_5th() const;
  void clear_ping_ntile_5th();
  static const int kPingNtile5ThFieldNumber = 50;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_5th() const;
  void set_ping_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ntile_50th = 51;
  bool has_ping_ntile_50th() const;
  void clear_ping_ntile_50th();
  static const int kPingNtile50ThFieldNumber = 51;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_50th() const;
  void set_ping_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ntile_75th = 52;
  bool has_ping_ntile_75th() const;
  void clear_ping_ntile_75th();
  static const int kPingNtile75ThFieldNumber = 52;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_75th() const;
  void set_ping_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ntile_95th = 53;
  bool has_ping_ntile_95th() const;
  void clear_ping_ntile_95th();
  static const int kPingNtile95ThFieldNumber = 53;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_95th() const;
  void set_ping_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 ping_ntile_98th = 54;
  bool has_ping_ntile_98th() const;
  void clear_ping_ntile_98th();
  static const int kPingNtile98ThFieldNumber = 54;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_98th() const;
  void set_ping_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_negligible = 61;
  bool has_jitter_histogram_negligible() const;
  void clear_jitter_histogram_negligible();
  static const int kJitterHistogramNegligibleFieldNumber = 61;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_negligible() const;
  void set_jitter_histogram_negligible(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_1 = 62;
  bool has_jitter_histogram_1() const;
  void clear_jitter_histogram_1();
  static const int kJitterHistogram1FieldNumber = 62;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_1() const;
  void set_jitter_histogram_1(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_2 = 63;
  bool has_jitter_histogram_2() const;
  void clear_jitter_histogram_2();
  static const int kJitterHistogram2FieldNumber = 63;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_2() const;
  void set_jitter_histogram_2(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_5 = 64;
  bool has_jitter_histogram_5() const;
  void clear_jitter_histogram_5();
  static const int kJitterHistogram5FieldNumber = 64;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_5() const;
  void set_jitter_histogram_5(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_10 = 65;
  bool has_jitter_histogram_10() const;
  void clear_jitter_histogram_10();
  static const int kJitterHistogram10FieldNumber = 65;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_10() const;
  void set_jitter_histogram_10(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 jitter_histogram_20 = 66;
  bool has_jitter_histogram_20() const;
  void clear_jitter_histogram_20();
  static const int kJitterHistogram20FieldNumber = 66;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_20() const;
  void set_jitter_histogram_20(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_max = 67;
  bool has_txspeed_max() const;
  void clear_txspeed_max();
  static const int kTxspeedMaxFieldNumber = 67;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_max() const;
  void set_txspeed_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_16 = 68;
  bool has_txspeed_histogram_16() const;
  void clear_txspeed_histogram_16();
  static const int kTxspeedHistogram16FieldNumber = 68;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_16() const;
  void set_txspeed_histogram_16(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_32 = 69;
  bool has_txspeed_histogram_32() const;
  void clear_txspeed_histogram_32();
  static const int kTxspeedHistogram32FieldNumber = 69;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_32() const;
  void set_txspeed_histogram_32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_64 = 70;
  bool has_txspeed_histogram_64() const;
  void clear_txspeed_histogram_64();
  static const int kTxspeedHistogram64FieldNumber = 70;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_64() const;
  void set_txspeed_histogram_64(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_128 = 71;
  bool has_txspeed_histogram_128() const;
  void clear_txspeed_histogram_128();
  static const int kTxspeedHistogram128FieldNumber = 71;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_128() const;
  void set_txspeed_histogram_128(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_ntile_98th = 94;
  bool has_rxspeed_ntile_98th() const;
  void clear_rxspeed_ntile_98th();
  static const int kRxspeedNtile98ThFieldNumber = 94;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_98th() const;
  void set_rxspeed_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_256 = 72;
  bool has_txspeed_histogram_256() const;
  void clear_txspeed_histogram_256();
  static const int kTxspeedHistogram256FieldNumber = 72;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_256() const;
  void set_txspeed_histogram_256(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_512 = 73;
  bool has_txspeed_histogram_512() const;
  void clear_txspeed_histogram_512();
  static const int kTxspeedHistogram512FieldNumber = 73;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_512() const;
  void set_txspeed_histogram_512(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_1024 = 74;
  bool has_txspeed_histogram_1024() const;
  void clear_txspeed_histogram_1024();
  static const int kTxspeedHistogram1024FieldNumber = 74;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_1024() const;
  void set_txspeed_histogram_1024(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_histogram_max = 75;
  bool has_txspeed_histogram_max() const;
  void clear_txspeed_histogram_max();
  static const int kTxspeedHistogramMaxFieldNumber = 75;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_max() const;
  void set_txspeed_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_ntile_5th = 76;
  bool has_txspeed_ntile_5th() const;
  void clear_txspeed_ntile_5th();
  static const int kTxspeedNtile5ThFieldNumber = 76;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_5th() const;
  void set_txspeed_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_ntile_50th = 77;
  bool has_txspeed_ntile_50th() const;
  void clear_txspeed_ntile_50th();
  static const int kTxspeedNtile50ThFieldNumber = 77;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_50th() const;
  void set_txspeed_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_ntile_75th = 78;
  bool has_txspeed_ntile_75th() const;
  void clear_txspeed_ntile_75th();
  static const int kTxspeedNtile75ThFieldNumber = 78;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_75th() const;
  void set_txspeed_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_ntile_95th = 79;
  bool has_txspeed_ntile_95th() const;
  void clear_txspeed_ntile_95th();
  static const int kTxspeedNtile95ThFieldNumber = 79;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_95th() const;
  void set_txspeed_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 txspeed_ntile_98th = 80;
  bool has_txspeed_ntile_98th() const;
  void clear_txspeed_ntile_98th();
  static const int kTxspeedNtile98ThFieldNumber = 80;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_98th() const;
  void set_txspeed_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_max = 81;
  bool has_rxspeed_max() const;
  void clear_rxspeed_max();
  static const int kRxspeedMaxFieldNumber = 81;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_max() const;
  void set_rxspeed_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_16 = 82;
  bool has_rxspeed_histogram_16() const;
  void clear_rxspeed_histogram_16();
  static const int kRxspeedHistogram16FieldNumber = 82;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_16() const;
  void set_rxspeed_histogram_16(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_32 = 83;
  bool has_rxspeed_histogram_32() const;
  void clear_rxspeed_histogram_32();
  static const int kRxspeedHistogram32FieldNumber = 83;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_32() const;
  void set_rxspeed_histogram_32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_64 = 84;
  bool has_rxspeed_histogram_64() const;
  void clear_rxspeed_histogram_64();
  static const int kRxspeedHistogram64FieldNumber = 84;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_64() const;
  void set_rxspeed_histogram_64(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_128 = 85;
  bool has_rxspeed_histogram_128() const;
  void clear_rxspeed_histogram_128();
  static const int kRxspeedHistogram128FieldNumber = 85;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_128() const;
  void set_rxspeed_histogram_128(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_256 = 86;
  bool has_rxspeed_histogram_256() const;
  void clear_rxspeed_histogram_256();
  static const int kRxspeedHistogram256FieldNumber = 86;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_256() const;
  void set_rxspeed_histogram_256(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_512 = 87;
  bool has_rxspeed_histogram_512() const;
  void clear_rxspeed_histogram_512();
  static const int kRxspeedHistogram512FieldNumber = 87;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_512() const;
  void set_rxspeed_histogram_512(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_1024 = 88;
  bool has_rxspeed_histogram_1024() const;
  void clear_rxspeed_histogram_1024();
  static const int kRxspeedHistogram1024FieldNumber = 88;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_1024() const;
  void set_rxspeed_histogram_1024(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_histogram_max = 89;
  bool has_rxspeed_histogram_max() const;
  void clear_rxspeed_histogram_max();
  static const int kRxspeedHistogramMaxFieldNumber = 89;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_max() const;
  void set_rxspeed_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_ntile_5th = 90;
  bool has_rxspeed_ntile_5th() const;
  void clear_rxspeed_ntile_5th();
  static const int kRxspeedNtile5ThFieldNumber = 90;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_5th() const;
  void set_rxspeed_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_ntile_50th = 91;
  bool has_rxspeed_ntile_50th() const;
  void clear_rxspeed_ntile_50th();
  static const int kRxspeedNtile50ThFieldNumber = 91;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_50th() const;
  void set_rxspeed_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_ntile_75th = 92;
  bool has_rxspeed_ntile_75th() const;
  void clear_rxspeed_ntile_75th();
  static const int kRxspeedNtile75ThFieldNumber = 92;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_75th() const;
  void set_rxspeed_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 rxspeed_ntile_95th = 93;
  bool has_rxspeed_ntile_95th() const;
  void clear_rxspeed_ntile_95th();
  static const int kRxspeedNtile95ThFieldNumber = 93;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_95th() const;
  void set_rxspeed_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramLinkLifetimeStats)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<3> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kb_sent_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 kb_recv_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_sequenced_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_dropped_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_out_of_order_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_duplicate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 packets_recv_lurch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_100_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_99_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_97_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_95_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_90_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_75_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_50_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_histogram_dead_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_2nd_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_5th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_25th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 quality_ntile_50th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_25_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_50_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_75_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_100_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_125_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_150_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_200_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_300_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_histogram_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_5th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_50th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_75th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_95th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ping_ntile_98th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_negligible_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_10_;
  ::PROTOBUF_NAMESPACE_ID::uint32 jitter_histogram_20_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_128_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_98th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_256_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_512_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_1024_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_histogram_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_5th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_50th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_75th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_95th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 txspeed_ntile_98th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_16_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_32_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_64_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_128_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_256_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_512_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_1024_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_histogram_max_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_5th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_50th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_75th_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rxspeed_ntile_95th_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class CMsgSteamDatagramConnectionQuality :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CMsgSteamDatagramConnectionQuality) */ {
 public:
  CMsgSteamDatagramConnectionQuality();
  virtual ~CMsgSteamDatagramConnectionQuality();

  CMsgSteamDatagramConnectionQuality(const CMsgSteamDatagramConnectionQuality& from);
  CMsgSteamDatagramConnectionQuality(CMsgSteamDatagramConnectionQuality&& from) noexcept
    : CMsgSteamDatagramConnectionQuality() {
    *this = ::std::move(from);
  }

  inline CMsgSteamDatagramConnectionQuality& operator=(const CMsgSteamDatagramConnectionQuality& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramConnectionQuality& operator=(CMsgSteamDatagramConnectionQuality&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CMsgSteamDatagramConnectionQuality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgSteamDatagramConnectionQuality* internal_default_instance() {
    return reinterpret_cast<const CMsgSteamDatagramConnectionQuality*>(
               &_CMsgSteamDatagramConnectionQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgSteamDatagramConnectionQuality* other);
  friend void swap(CMsgSteamDatagramConnectionQuality& a, CMsgSteamDatagramConnectionQuality& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgSteamDatagramConnectionQuality* New() const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionQuality>(nullptr);
  }

  CMsgSteamDatagramConnectionQuality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CMsgSteamDatagramConnectionQuality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CMsgSteamDatagramConnectionQuality& from);
  void MergeFrom(const CMsgSteamDatagramConnectionQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgSteamDatagramConnectionQuality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CMsgSteamDatagramConnectionQuality";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_steamnetworkingsockets_5fmessages_2eproto);
    return ::descriptor_table_steamnetworkingsockets_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
  bool has_instantaneous() const;
  void clear_instantaneous();
  static const int kInstantaneousFieldNumber = 1;
  const ::CMsgSteamDatagramLinkInstantaneousStats& instantaneous() const;
  ::CMsgSteamDatagramLinkInstantaneousStats* release_instantaneous();
  ::CMsgSteamDatagramLinkInstantaneousStats* mutable_instantaneous();
  void set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous);

  // optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
  bool has_lifetime() const;
  void clear_lifetime();
  static const int kLifetimeFieldNumber = 2;
  const ::CMsgSteamDatagramLinkLifetimeStats& lifetime() const;
  ::CMsgSteamDatagramLinkLifetimeStats* release_lifetime();
  ::CMsgSteamDatagramLinkLifetimeStats* mutable_lifetime();
  void set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime);

  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramConnectionQuality)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::CMsgSteamDatagramLinkInstantaneousStats* instantaneous_;
  ::CMsgSteamDatagramLinkLifetimeStats* lifetime_;
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CMsgSteamDatagramSessionCryptInfo

// optional .CMsgSteamDatagramSessionCryptInfo.EKeyType key_type = 1;
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_type() {
  key_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::CMsgSteamDatagramSessionCryptInfo_EKeyType CMsgSteamDatagramSessionCryptInfo::key_type() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfo.key_type)
  return static_cast< ::CMsgSteamDatagramSessionCryptInfo_EKeyType >(key_type_);
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_type(::CMsgSteamDatagramSessionCryptInfo_EKeyType value) {
  assert(::CMsgSteamDatagramSessionCryptInfo_EKeyType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  key_type_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfo.key_type)
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramSessionCryptInfo::has_key_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_key_data() {
  key_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramSessionCryptInfo::key_data() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfo.key_data)
  return key_data_.GetNoArena();
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfo.key_data)
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSessionCryptInfo.key_data)
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSessionCryptInfo.key_data)
}
inline void CMsgSteamDatagramSessionCryptInfo::set_key_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSessionCryptInfo.key_data)
}
inline std::string* CMsgSteamDatagramSessionCryptInfo::mutable_key_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSessionCryptInfo.key_data)
  return key_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgSteamDatagramSessionCryptInfo::release_key_data() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSessionCryptInfo.key_data)
  if (!has_key_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramSessionCryptInfo::set_allocated_key_data(std::string* key_data) {
  if (key_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key_data);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSessionCryptInfo.key_data)
}

// optional fixed64 nonce = 3;
inline bool CMsgSteamDatagramSessionCryptInfo::has_nonce() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramSessionCryptInfo::nonce() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfo.nonce)
  return nonce_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  nonce_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfo.nonce)
}

// optional uint32 protocol_version = 4;
inline bool CMsgSteamDatagramSessionCryptInfo::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfo::clear_protocol_version() {
  protocol_version_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramSessionCryptInfo::protocol_version() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfo.protocol_version)
  return protocol_version_;
}
inline void CMsgSteamDatagramSessionCryptInfo::set_protocol_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfo.protocol_version)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramSessionCryptInfoSigned

// optional bytes info = 1;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_info() {
  info_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramSessionCryptInfoSigned::info() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfoSigned.info)
  return info_.GetNoArena();
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfoSigned.info)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSessionCryptInfoSigned.info)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSessionCryptInfoSigned.info)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_info(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  info_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSessionCryptInfoSigned.info)
}
inline std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_info() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSessionCryptInfoSigned.info)
  return info_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_info() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSessionCryptInfoSigned.info)
  if (!has_info()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return info_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_info(std::string* info) {
  if (info != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  info_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSessionCryptInfoSigned.info)
}

// optional bytes signature = 2;
inline bool CMsgSteamDatagramSessionCryptInfoSigned::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramSessionCryptInfoSigned::signature() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramSessionCryptInfoSigned.signature)
  return signature_.GetNoArena();
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramSessionCryptInfoSigned.signature)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramSessionCryptInfoSigned.signature)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramSessionCryptInfoSigned.signature)
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_signature(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramSessionCryptInfoSigned.signature)
}
inline std::string* CMsgSteamDatagramSessionCryptInfoSigned::mutable_signature() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramSessionCryptInfoSigned.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgSteamDatagramSessionCryptInfoSigned::release_signature() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramSessionCryptInfoSigned.signature)
  if (!has_signature()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return signature_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramSessionCryptInfoSigned::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramSessionCryptInfoSigned.signature)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramDiagnostic

// optional uint32 severity = 1;
inline bool CMsgSteamDatagramDiagnostic::has_severity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::clear_severity() {
  severity_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramDiagnostic::severity() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramDiagnostic.severity)
  return severity_;
}
inline void CMsgSteamDatagramDiagnostic::set_severity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  severity_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramDiagnostic.severity)
}

// optional string text = 2;
inline bool CMsgSteamDatagramDiagnostic::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramDiagnostic::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramDiagnostic::text() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramDiagnostic.text)
  return text_.GetNoArena();
}
inline void CMsgSteamDatagramDiagnostic::set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramDiagnostic.text)
}
inline void CMsgSteamDatagramDiagnostic::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CMsgSteamDatagramDiagnostic.text)
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CMsgSteamDatagramDiagnostic.text)
}
inline void CMsgSteamDatagramDiagnostic::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CMsgSteamDatagramDiagnostic.text)
}
inline std::string* CMsgSteamDatagramDiagnostic::mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramDiagnostic.text)
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CMsgSteamDatagramDiagnostic::release_text() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramDiagnostic.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CMsgSteamDatagramDiagnostic::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramDiagnostic.text)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkInstantaneousStats

// optional uint32 out_packets_per_sec_x10 = 1;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_packets_per_sec_x10() {
  out_packets_per_sec_x10_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_packets_per_sec_x10() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.out_packets_per_sec_x10)
  return out_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_packets_per_sec_x10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  out_packets_per_sec_x10_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.out_packets_per_sec_x10)
}

// optional uint32 out_bytes_per_sec = 2;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_out_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_out_bytes_per_sec() {
  out_bytes_per_sec_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::out_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.out_bytes_per_sec)
  return out_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_out_bytes_per_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  out_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.out_bytes_per_sec)
}

// optional uint32 in_packets_per_sec_x10 = 3;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_packets_per_sec_x10() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_packets_per_sec_x10() {
  in_packets_per_sec_x10_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_packets_per_sec_x10() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.in_packets_per_sec_x10)
  return in_packets_per_sec_x10_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_packets_per_sec_x10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  in_packets_per_sec_x10_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.in_packets_per_sec_x10)
}

// optional uint32 in_bytes_per_sec = 4;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_in_bytes_per_sec() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_in_bytes_per_sec() {
  in_bytes_per_sec_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::in_bytes_per_sec() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.in_bytes_per_sec)
  return in_bytes_per_sec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_in_bytes_per_sec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  in_bytes_per_sec_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.in_bytes_per_sec)
}

// optional uint32 ping_ms = 5;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_ping_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_ping_ms() {
  ping_ms_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::ping_ms() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.ping_ms)
  return ping_ms_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_ping_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ping_ms_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.ping_ms)
}

// optional uint32 packets_dropped_pct = 6;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_dropped_pct() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_dropped_pct() {
  packets_dropped_pct_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_dropped_pct() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.packets_dropped_pct)
  return packets_dropped_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_dropped_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  packets_dropped_pct_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.packets_dropped_pct)
}

// optional uint32 packets_weird_sequence_pct = 7;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_packets_weird_sequence_pct() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_packets_weird_sequence_pct() {
  packets_weird_sequence_pct_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::packets_weird_sequence_pct() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.packets_weird_sequence_pct)
  return packets_weird_sequence_pct_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_packets_weird_sequence_pct(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  packets_weird_sequence_pct_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.packets_weird_sequence_pct)
}

// optional uint32 peak_jitter_usec = 8;
inline bool CMsgSteamDatagramLinkInstantaneousStats::has_peak_jitter_usec() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::clear_peak_jitter_usec() {
  peak_jitter_usec_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkInstantaneousStats::peak_jitter_usec() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkInstantaneousStats.peak_jitter_usec)
  return peak_jitter_usec_;
}
inline void CMsgSteamDatagramLinkInstantaneousStats::set_peak_jitter_usec(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  peak_jitter_usec_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkInstantaneousStats.peak_jitter_usec)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramLinkLifetimeStats

// optional uint64 packets_sent = 3;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_sent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_sent() {
  packets_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_sent() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_sent)
  return packets_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  packets_sent_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_sent)
}

// optional uint64 kb_sent = 4;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_sent() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_sent() {
  kb_sent_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_sent() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.kb_sent)
  return kb_sent_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_sent(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  kb_sent_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.kb_sent)
}

// optional uint64 packets_recv = 5;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv() {
  packets_recv_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv)
  return packets_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  packets_recv_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv)
}

// optional uint64 kb_recv = 6;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_kb_recv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_kb_recv() {
  kb_recv_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::kb_recv() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.kb_recv)
  return kb_recv_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_kb_recv(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  kb_recv_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.kb_recv)
}

// optional uint64 packets_recv_sequenced = 7;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_sequenced() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_sequenced() {
  packets_recv_sequenced_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_sequenced() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv_sequenced)
  return packets_recv_sequenced_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_sequenced(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  packets_recv_sequenced_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv_sequenced)
}

// optional uint64 packets_recv_dropped = 8;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_dropped() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_dropped() {
  packets_recv_dropped_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_dropped() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv_dropped)
  return packets_recv_dropped_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_dropped(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  packets_recv_dropped_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv_dropped)
}

// optional uint64 packets_recv_out_of_order = 9;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_out_of_order() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_out_of_order() {
  packets_recv_out_of_order_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_out_of_order() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv_out_of_order)
  return packets_recv_out_of_order_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_out_of_order(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  packets_recv_out_of_order_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv_out_of_order)
}

// optional uint64 packets_recv_duplicate = 10;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_duplicate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_duplicate() {
  packets_recv_duplicate_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_duplicate() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv_duplicate)
  return packets_recv_duplicate_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_duplicate(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  packets_recv_duplicate_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv_duplicate)
}

// optional uint64 packets_recv_lurch = 11;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_packets_recv_lurch() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_packets_recv_lurch() {
  packets_recv_lurch_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 CMsgSteamDatagramLinkLifetimeStats::packets_recv_lurch() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.packets_recv_lurch)
  return packets_recv_lurch_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_packets_recv_lurch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000100u;
  packets_recv_lurch_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.packets_recv_lurch)
}

// optional uint32 quality_histogram_100 = 21;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_100() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_100() {
  quality_histogram_100_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_100() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_100)
  return quality_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_100(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  quality_histogram_100_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_100)
}

// optional uint32 quality_histogram_99 = 22;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_99() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_99() {
  quality_histogram_99_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_99() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_99)
  return quality_histogram_99_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_99(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  quality_histogram_99_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_99)
}

// optional uint32 quality_histogram_97 = 23;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_97() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_97() {
  quality_histogram_97_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_97() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_97)
  return quality_histogram_97_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_97(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  quality_histogram_97_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_97)
}

// optional uint32 quality_histogram_95 = 24;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_95() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_95() {
  quality_histogram_95_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_95() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_95)
  return quality_histogram_95_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_95(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  quality_histogram_95_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_95)
}

// optional uint32 quality_histogram_90 = 25;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_90() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_90() {
  quality_histogram_90_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_90() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_90)
  return quality_histogram_90_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_90(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  quality_histogram_90_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_90)
}

// optional uint32 quality_histogram_75 = 26;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_75() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_75() {
  quality_histogram_75_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_75() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_75)
  return quality_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_75(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  quality_histogram_75_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_75)
}

// optional uint32 quality_histogram_50 = 27;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_50() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_50() {
  quality_histogram_50_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_50() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_50)
  return quality_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_50(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  quality_histogram_50_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_50)
}

// optional uint32 quality_histogram_1 = 28;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_1() {
  quality_histogram_1_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_1() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_1)
  return quality_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  quality_histogram_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_1)
}

// optional uint32 quality_histogram_dead = 29;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_histogram_dead() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_histogram_dead() {
  quality_histogram_dead_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_histogram_dead() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_dead)
  return quality_histogram_dead_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_histogram_dead(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  quality_histogram_dead_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_histogram_dead)
}

// optional uint32 quality_ntile_2nd = 30;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_2nd() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_2nd() {
  quality_ntile_2nd_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_2nd() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_2nd)
  return quality_ntile_2nd_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_2nd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  quality_ntile_2nd_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_2nd)
}

// optional uint32 quality_ntile_5th = 31;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_5th() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_5th() {
  quality_ntile_5th_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_5th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_5th)
  return quality_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  quality_ntile_5th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_5th)
}

// optional uint32 quality_ntile_25th = 32;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_25th() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_25th() {
  quality_ntile_25th_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_25th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_25th)
  return quality_ntile_25th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_25th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  quality_ntile_25th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_25th)
}

// optional uint32 quality_ntile_50th = 33;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_quality_ntile_50th() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_quality_ntile_50th() {
  quality_ntile_50th_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::quality_ntile_50th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_50th)
  return quality_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_quality_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  quality_ntile_50th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.quality_ntile_50th)
}

// optional uint32 ping_histogram_25 = 41;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_25() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_25() {
  ping_histogram_25_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_25() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_25)
  return ping_histogram_25_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_25(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  ping_histogram_25_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_25)
}

// optional uint32 ping_histogram_50 = 42;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_50() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_50() {
  ping_histogram_50_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_50() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_50)
  return ping_histogram_50_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_50(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  ping_histogram_50_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_50)
}

// optional uint32 ping_histogram_75 = 43;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_75() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_75() {
  ping_histogram_75_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_75() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_75)
  return ping_histogram_75_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_75(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  ping_histogram_75_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_75)
}

// optional uint32 ping_histogram_100 = 44;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_100() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_100() {
  ping_histogram_100_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_100() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_100)
  return ping_histogram_100_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_100(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  ping_histogram_100_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_100)
}

// optional uint32 ping_histogram_125 = 45;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_125() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_125() {
  ping_histogram_125_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_125() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_125)
  return ping_histogram_125_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_125(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  ping_histogram_125_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_125)
}

// optional uint32 ping_histogram_150 = 46;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_150() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_150() {
  ping_histogram_150_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_150() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_150)
  return ping_histogram_150_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_150(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  ping_histogram_150_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_150)
}

// optional uint32 ping_histogram_200 = 47;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_200() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_200() {
  ping_histogram_200_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_200() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_200)
  return ping_histogram_200_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_200(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  ping_histogram_200_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_200)
}

// optional uint32 ping_histogram_300 = 48;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_300() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_300() {
  ping_histogram_300_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_300() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_300)
  return ping_histogram_300_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_300(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  ping_histogram_300_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_300)
}

// optional uint32 ping_histogram_max = 49;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_histogram_max() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_histogram_max() {
  ping_histogram_max_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_histogram_max() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_max)
  return ping_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  ping_histogram_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_histogram_max)
}

// optional uint32 ping_ntile_5th = 50;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_5th() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_5th() {
  ping_ntile_5th_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_5th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_5th)
  return ping_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  ping_ntile_5th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_5th)
}

// optional uint32 ping_ntile_50th = 51;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_50th() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_50th() {
  ping_ntile_50th_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_50th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_50th)
  return ping_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  ping_ntile_50th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_50th)
}

// optional uint32 ping_ntile_75th = 52;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_75th() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_75th() {
  ping_ntile_75th_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_75th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_75th)
  return ping_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  ping_ntile_75th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_75th)
}

// optional uint32 ping_ntile_95th = 53;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_95th() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_95th() {
  ping_ntile_95th_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_95th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_95th)
  return ping_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  ping_ntile_95th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_95th)
}

// optional uint32 ping_ntile_98th = 54;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_ping_ntile_98th() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_ping_ntile_98th() {
  ping_ntile_98th_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::ping_ntile_98th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_98th)
  return ping_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_ping_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  ping_ntile_98th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.ping_ntile_98th)
}

// optional uint32 jitter_histogram_negligible = 61;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_negligible() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_negligible() {
  jitter_histogram_negligible_ = 0u;
  _has_bits_[1] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_negligible() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_negligible)
  return jitter_histogram_negligible_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_negligible(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000010u;
  jitter_histogram_negligible_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_negligible)
}

// optional uint32 jitter_histogram_1 = 62;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_1() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_1() {
  jitter_histogram_1_ = 0u;
  _has_bits_[1] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_1() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_1)
  return jitter_histogram_1_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000020u;
  jitter_histogram_1_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_1)
}

// optional uint32 jitter_histogram_2 = 63;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_2() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_2() {
  jitter_histogram_2_ = 0u;
  _has_bits_[1] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_2() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_2)
  return jitter_histogram_2_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000040u;
  jitter_histogram_2_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_2)
}

// optional uint32 jitter_histogram_5 = 64;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_5() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_5() {
  jitter_histogram_5_ = 0u;
  _has_bits_[1] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_5() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_5)
  return jitter_histogram_5_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_5(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000080u;
  jitter_histogram_5_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_5)
}

// optional uint32 jitter_histogram_10 = 65;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_10() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_10() {
  jitter_histogram_10_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_10() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_10)
  return jitter_histogram_10_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_10(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  jitter_histogram_10_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_10)
}

// optional uint32 jitter_histogram_20 = 66;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_jitter_histogram_20() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_jitter_histogram_20() {
  jitter_histogram_20_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::jitter_histogram_20() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_20)
  return jitter_histogram_20_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_jitter_histogram_20(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  jitter_histogram_20_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.jitter_histogram_20)
}

// optional uint32 txspeed_max = 67;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_max() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_max() {
  txspeed_max_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_max() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_max)
  return txspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  txspeed_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_max)
}

// optional uint32 txspeed_histogram_16 = 68;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_16() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_16() {
  txspeed_histogram_16_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_16() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_16)
  return txspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  txspeed_histogram_16_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_16)
}

// optional uint32 txspeed_histogram_32 = 69;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_32() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_32() {
  txspeed_histogram_32_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_32() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_32)
  return txspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  txspeed_histogram_32_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_32)
}

// optional uint32 txspeed_histogram_64 = 70;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_64() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_64() {
  txspeed_histogram_64_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_64() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_64)
  return txspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_64(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  txspeed_histogram_64_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_64)
}

// optional uint32 txspeed_histogram_128 = 71;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_128() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_128() {
  txspeed_histogram_128_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_128() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_128)
  return txspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_128(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  txspeed_histogram_128_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_128)
}

// optional uint32 txspeed_histogram_256 = 72;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_256() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_256() {
  txspeed_histogram_256_ = 0u;
  _has_bits_[1] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_256() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_256)
  return txspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_256(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00010000u;
  txspeed_histogram_256_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_256)
}

// optional uint32 txspeed_histogram_512 = 73;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_512() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_512() {
  txspeed_histogram_512_ = 0u;
  _has_bits_[1] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_512() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_512)
  return txspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_512(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00020000u;
  txspeed_histogram_512_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_512)
}

// optional uint32 txspeed_histogram_1024 = 74;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_1024() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_1024() {
  txspeed_histogram_1024_ = 0u;
  _has_bits_[1] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_1024() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_1024)
  return txspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_1024(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00040000u;
  txspeed_histogram_1024_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_1024)
}

// optional uint32 txspeed_histogram_max = 75;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_histogram_max() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_histogram_max() {
  txspeed_histogram_max_ = 0u;
  _has_bits_[1] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_histogram_max() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_max)
  return txspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00080000u;
  txspeed_histogram_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_histogram_max)
}

// optional uint32 txspeed_ntile_5th = 76;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_5th() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_5th() {
  txspeed_ntile_5th_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_5th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_5th)
  return txspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  txspeed_ntile_5th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_5th)
}

// optional uint32 txspeed_ntile_50th = 77;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_50th() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_50th() {
  txspeed_ntile_50th_ = 0u;
  _has_bits_[1] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_50th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_50th)
  return txspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00200000u;
  txspeed_ntile_50th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_50th)
}

// optional uint32 txspeed_ntile_75th = 78;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_75th() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_75th() {
  txspeed_ntile_75th_ = 0u;
  _has_bits_[1] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_75th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_75th)
  return txspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00400000u;
  txspeed_ntile_75th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_75th)
}

// optional uint32 txspeed_ntile_95th = 79;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_95th() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_95th() {
  txspeed_ntile_95th_ = 0u;
  _has_bits_[1] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_95th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_95th)
  return txspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00800000u;
  txspeed_ntile_95th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_95th)
}

// optional uint32 txspeed_ntile_98th = 80;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_txspeed_ntile_98th() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_txspeed_ntile_98th() {
  txspeed_ntile_98th_ = 0u;
  _has_bits_[1] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::txspeed_ntile_98th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_98th)
  return txspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_txspeed_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x01000000u;
  txspeed_ntile_98th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.txspeed_ntile_98th)
}

// optional uint32 rxspeed_max = 81;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_max() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_max() {
  rxspeed_max_ = 0u;
  _has_bits_[1] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_max() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_max)
  return rxspeed_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x02000000u;
  rxspeed_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_max)
}

// optional uint32 rxspeed_histogram_16 = 82;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_16() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_16() {
  rxspeed_histogram_16_ = 0u;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_16() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_16)
  return rxspeed_histogram_16_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x04000000u;
  rxspeed_histogram_16_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_16)
}

// optional uint32 rxspeed_histogram_32 = 83;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_32() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_32() {
  rxspeed_histogram_32_ = 0u;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_32() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_32)
  return rxspeed_histogram_32_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x08000000u;
  rxspeed_histogram_32_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_32)
}

// optional uint32 rxspeed_histogram_64 = 84;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_64() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_64() {
  rxspeed_histogram_64_ = 0u;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_64() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_64)
  return rxspeed_histogram_64_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_64(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x10000000u;
  rxspeed_histogram_64_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_64)
}

// optional uint32 rxspeed_histogram_128 = 85;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_128() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_128() {
  rxspeed_histogram_128_ = 0u;
  _has_bits_[1] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_128() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_128)
  return rxspeed_histogram_128_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_128(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x20000000u;
  rxspeed_histogram_128_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_128)
}

// optional uint32 rxspeed_histogram_256 = 86;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_256() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_256() {
  rxspeed_histogram_256_ = 0u;
  _has_bits_[1] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_256() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_256)
  return rxspeed_histogram_256_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_256(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x40000000u;
  rxspeed_histogram_256_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_256)
}

// optional uint32 rxspeed_histogram_512 = 87;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_512() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_512() {
  rxspeed_histogram_512_ = 0u;
  _has_bits_[1] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_512() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_512)
  return rxspeed_histogram_512_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_512(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x80000000u;
  rxspeed_histogram_512_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_512)
}

// optional uint32 rxspeed_histogram_1024 = 88;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_1024() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_1024() {
  rxspeed_histogram_1024_ = 0u;
  _has_bits_[2] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_1024() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_1024)
  return rxspeed_histogram_1024_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_1024(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000001u;
  rxspeed_histogram_1024_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_1024)
}

// optional uint32 rxspeed_histogram_max = 89;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_histogram_max() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_histogram_max() {
  rxspeed_histogram_max_ = 0u;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_histogram_max() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_max)
  return rxspeed_histogram_max_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_histogram_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000002u;
  rxspeed_histogram_max_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_histogram_max)
}

// optional uint32 rxspeed_ntile_5th = 90;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_5th() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_5th() {
  rxspeed_ntile_5th_ = 0u;
  _has_bits_[2] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_5th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_5th)
  return rxspeed_ntile_5th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_5th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000004u;
  rxspeed_ntile_5th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_5th)
}

// optional uint32 rxspeed_ntile_50th = 91;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_50th() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_50th() {
  rxspeed_ntile_50th_ = 0u;
  _has_bits_[2] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_50th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_50th)
  return rxspeed_ntile_50th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_50th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000008u;
  rxspeed_ntile_50th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_50th)
}

// optional uint32 rxspeed_ntile_75th = 92;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_75th() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_75th() {
  rxspeed_ntile_75th_ = 0u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_75th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_75th)
  return rxspeed_ntile_75th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_75th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  rxspeed_ntile_75th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_75th)
}

// optional uint32 rxspeed_ntile_95th = 93;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_95th() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_95th() {
  rxspeed_ntile_95th_ = 0u;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_95th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_95th)
  return rxspeed_ntile_95th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_95th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[2] |= 0x00000020u;
  rxspeed_ntile_95th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_95th)
}

// optional uint32 rxspeed_ntile_98th = 94;
inline bool CMsgSteamDatagramLinkLifetimeStats::has_rxspeed_ntile_98th() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgSteamDatagramLinkLifetimeStats::clear_rxspeed_ntile_98th() {
  rxspeed_ntile_98th_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CMsgSteamDatagramLinkLifetimeStats::rxspeed_ntile_98th() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_98th)
  return rxspeed_ntile_98th_;
}
inline void CMsgSteamDatagramLinkLifetimeStats::set_rxspeed_ntile_98th(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00008000u;
  rxspeed_ntile_98th_ = value;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramLinkLifetimeStats.rxspeed_ntile_98th)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramConnectionQuality

// optional .CMsgSteamDatagramLinkInstantaneousStats instantaneous = 1;
inline bool CMsgSteamDatagramConnectionQuality::has_instantaneous() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::clear_instantaneous() {
  if (instantaneous_ != nullptr) instantaneous_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamDatagramLinkInstantaneousStats& CMsgSteamDatagramConnectionQuality::instantaneous() const {
  const ::CMsgSteamDatagramLinkInstantaneousStats* p = instantaneous_;
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramConnectionQuality.instantaneous)
  return p != nullptr ? *p : *reinterpret_cast<const ::CMsgSteamDatagramLinkInstantaneousStats*>(
      &::_CMsgSteamDatagramLinkInstantaneousStats_default_instance_);
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::release_instantaneous() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramConnectionQuality.instantaneous)
  _has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamDatagramLinkInstantaneousStats* temp = instantaneous_;
  instantaneous_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramLinkInstantaneousStats* CMsgSteamDatagramConnectionQuality::mutable_instantaneous() {
  _has_bits_[0] |= 0x00000001u;
  if (instantaneous_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramLinkInstantaneousStats>(GetArenaNoVirtual());
    instantaneous_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramConnectionQuality.instantaneous)
  return instantaneous_;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_instantaneous(::CMsgSteamDatagramLinkInstantaneousStats* instantaneous) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete instantaneous_;
  }
  if (instantaneous) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instantaneous = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instantaneous, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  instantaneous_ = instantaneous;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramConnectionQuality.instantaneous)
}

// optional .CMsgSteamDatagramLinkLifetimeStats lifetime = 2;
inline bool CMsgSteamDatagramConnectionQuality::has_lifetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgSteamDatagramConnectionQuality::clear_lifetime() {
  if (lifetime_ != nullptr) lifetime_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::CMsgSteamDatagramLinkLifetimeStats& CMsgSteamDatagramConnectionQuality::lifetime() const {
  const ::CMsgSteamDatagramLinkLifetimeStats* p = lifetime_;
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramConnectionQuality.lifetime)
  return p != nullptr ? *p : *reinterpret_cast<const ::CMsgSteamDatagramLinkLifetimeStats*>(
      &::_CMsgSteamDatagramLinkLifetimeStats_default_instance_);
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::release_lifetime() {
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramConnectionQuality.lifetime)
  _has_bits_[0] &= ~0x00000002u;
  ::CMsgSteamDatagramLinkLifetimeStats* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramLinkLifetimeStats* CMsgSteamDatagramConnectionQuality::mutable_lifetime() {
  _has_bits_[0] |= 0x00000002u;
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::CMsgSteamDatagramLinkLifetimeStats>(GetArenaNoVirtual());
    lifetime_ = p;
  }
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramConnectionQuality.lifetime)
  return lifetime_;
}
inline void CMsgSteamDatagramConnectionQuality::set_allocated_lifetime(::CMsgSteamDatagramLinkLifetimeStats* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lifetime_;
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramConnectionQuality.lifetime)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::CMsgSteamDatagramSessionCryptInfo_EKeyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CMsgSteamDatagramSessionCryptInfo_EKeyType>() {
  return ::CMsgSteamDatagramSessionCryptInfo_EKeyType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_steamnetworkingsockets_5fmessages_2eproto
